{"version":3,"file":"sdk-core.esm.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"sourcesContent":["export enum ChainId {\n  COSTON2 = 114,\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  OPTIMISM_SEPOLIA = 11155420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  ARBITRUM_SEPOLIA = 421614,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n  ZORA = 7777777,\n  ZORA_SEPOLIA = 999999999,\n  ROOTSTOCK = 30,\n  BLAST = 81457\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.COSTON2,\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.OPTIMISM_SEPOLIA,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.ARBITRUM_SEPOLIA,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n  ChainId.ZORA,\n  ChainId.ZORA_SEPOLIA,\n  ChainId.ROOTSTOCK,\n  ChainId.BLAST\n] as const\nexport type SupportedChainsType = typeof SUPPORTED_CHAINS[number]\n\nexport enum NativeCurrencyName {\n  COSTON2 = 'C2FLR',\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress?: string\n  multicallAddress: string\n  quoterAddress?: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  v1MixedRouteQuoterAddress?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.COSTON2]\n\n/**\n * @deprecated use V2_FACTORY_ADDRESSES instead\n */\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n/**\n * @deprecated use V2_ROUTER_ADDRESSES instead\n */\nexport const V2_ROUTER_ADDRESS = '0xe551A850133Ae4bCbF069927940296c1428A7194'\n\nconst COSTON2_ADDRESSES: ChainAddresses = {\n  multicallAddress: \"0x411E2E15390639Cd553508907329Ea95F23D9Bf0\"\n}\n\nexport const PERMIT2_ADDRESS = \"0x3CE3deF8d48d0D620061e5F0330a742B28B5945e\"\n\nexport const PERMIT2_ADDRESS_MAP: AddressMap = {\n  [ChainId.COSTON2]: \"0x3CE3deF8d48d0D620061e5F0330a742B28B5945e\",\n}\n\nexport const UNIVERSAL_ROUTER: AddressMap = {\n  [ChainId.COSTON2]: \"0x04F886Aed8B7Fc774535E6DEcaaFd3F2B63BB653\",\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!UNIVERSAL_ROUTER[chainId]) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return UNIVERSAL_ROUTER[chainId]\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3CoreFactoryAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    if (v3CoreFactoryAddress)\n      memo[chainId] = v3CoreFactoryAddress\n    return memo\n  }, {})\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {})\n}\n\nexport const OracleSwapVoter: AddressMap = {\n  [ChainId.COSTON2]: '0x72E374332EBdcae18CDa5D37Ec02ceD619812c49',\n}\n\nexport const OSLPManager: AddressMap = {\n  [ChainId.COSTON2]: '0x94a61861d5e8154B24095E619Bf69e457F373586',\n}\n\nexport const SuperfarmMultiRewardManager: AddressMap = {\n  [ChainId.COSTON2]: '0xeA2aCE79592BFe28e2b57810DcF668037c7d8a8b',\n}\n\n// export const TIMELOCK_ADDRESSES: AddressMap = {\n//   [ChainId.COSTON2]: '0x94ed40CEE9b8752bfaD93F7F79D3E4Bc1b5fC78b',\n// }\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const quoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    if (quoterAddress) {\n      memo[chainId] = quoterAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e')\n}\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\n/**\n * @deprecated use V2_FACTORY_ADDRESSES instead\n */\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.SEPOLIA]: '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0',\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070',\n  [ChainId.COSTON2]: '0xAf2977827a72e3CfE18104b0EDAF61Dd0689cd31'\n}\n\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.GOERLI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.ARBITRUM_ONE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.OPTIMISM]: '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2',\n  [ChainId.BASE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.AVALANCHE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.BNB]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.POLYGON]: '0xedf6066a2b290c185783862c7f4776a2c8077ad1',\n  [ChainId.BLAST]: '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035',\n  [ChainId.COSTON2]: '0xe551A850133Ae4bCbF069927940296c1428A7194'\n}\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E'\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0xBa60b6e6fF25488308789E6e0A65D838be34194e'\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573'\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2'\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e'\n}\n\n// optimism sepolia addresses\nconst OPTIMISM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',\n  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',\n  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',\n  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',\n  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',\n  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4'\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8'\n}\n\n// arbitrum sepolia v3 addresses\nconst ARBITRUM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',\n  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',\n  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',\n  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',\n  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',\n  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',\n  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E'\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',\n  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E'\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE'\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481'\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d'\n}\n\nconst ZORA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',\n  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',\n  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',\n  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',\n  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',\n  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',\n  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557'\n}\n\nconst ZORA_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',\n  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',\n  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',\n  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',\n  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',\n  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064'\n}\n\nconst ROOTSTOCK_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',\n  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',\n  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',\n  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',\n  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',\n  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',\n  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A'\n}\n\nconst BLAST_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',\n  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',\n  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',\n  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',\n  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',\n  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',\n  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66'\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.OPTIMISM_SEPOLIA]: OPTIMISM_SEPOLIA_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_SEPOLIA]: ARBITRUM_SEPOLIA_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\n  [ChainId.ZORA]: ZORA_ADDRESSES,\n  [ChainId.ZORA_SEPOLIA]: ZORA_SEPOLIA_ADDRESSES,\n  [ChainId.ROOTSTOCK]: ROOTSTOCK_ADDRESSES,\n  [ChainId.BLAST]: BLAST_ADDRESSES,\n  [ChainId.COSTON2]: COSTON2_ADDRESSES,\n}\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6'\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3',\n  [ChainId.COSTON2]: '0x8Ad2D1A537fe16d1C619fD877a26FA584798107f',\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x94ed40CEE9b8752bfaD93F7F79D3E4Bc1b5fC78b')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e'\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8'\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd'\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress\n  if (v1MixedRouteQuoterAddress) {\n    memo[chainId] = v1MixedRouteQuoterAddress\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (SUPPORTED_CHAINS.includes(chainId)) {\n    const id = chainId as SupportedChainsType\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n  }\n  return ''\n}\n\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    console.log(\"sdk-core/chainId: \", chainId, symbol, name)\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [114]: new Token(114, '0xc67dce33d7a8efa5ffeb961899c73fe01bce9273', 18, 'WC2FLR', 'Wrapped C2FLR')\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"],"names":["ChainId","SUPPORTED_CHAINS","COSTON2","MAINNET","OPTIMISM","OPTIMISM_GOERLI","OPTIMISM_SEPOLIA","ARBITRUM_ONE","ARBITRUM_GOERLI","ARBITRUM_SEPOLIA","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","ZORA","ZORA_SEPOLIA","ROOTSTOCK","BLAST","NativeCurrencyName","DEFAULT_NETWORKS","V2_FACTORY_ADDRESS","V2_ROUTER_ADDRESS","COSTON2_ADDRESSES","multicallAddress","PERMIT2_ADDRESS","PERMIT2_ADDRESS_MAP","UNIVERSAL_ROUTER","UNIVERSAL_ROUTER_ADDRESS","chainId","Error","V3_CORE_FACTORY_ADDRESSES","reduce","memo","v3CoreFactoryAddress","CHAIN_TO_ADDRESSES_MAP","V3_MIGRATOR_ADDRESSES","v3MigratorAddress","MULTICALL_ADDRESSES","OracleSwapVoter","OSLPManager","SuperfarmMultiRewardManager","QUOTER_ADDRESSES","quoterAddress","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","nonfungiblePositionManagerAddress","ENS_REGISTRAR_ADDRESSES","constructSameAddressMap","address","additionalNetworks","concat","UNI_ADDRESSES","UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS","V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","MAINNET_ADDRESSES","v1MixedRouteQuoterAddress","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","BNB_ADDRESSES","swapRouter02Address","OPTIMISM_GOERLI_ADDRESSES","OPTIMISM_SEPOLIA_ADDRESSES","ARBITRUM_GOERLI_ADDRESSES","ARBITRUM_SEPOLIA_ADDRESSES","SEPOLIA_ADDRESSES","AVALANCHE_ADDRESSES","BASE_ADDRESSES","BASE_GOERLI_ADDRESSES","ZORA_ADDRESSES","ZORA_SEPOLIA_ADDRESSES","ROOTSTOCK_ADDRESSES","BLAST_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","GOVERNANCE_BRAVO_ADDRESSES","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","ARGENT_WALLET_DETECTOR_ADDRESS","SOCKS_CONTROLLER_ADDRESSES","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","SWAP_ROUTER_02_ADDRESSES","includes","id","TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","console","log","isSafeInteger","NativeCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","buyFeeBps","sellFeeBps","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","Ether","onChain","_etherCache","isNative","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x"],"mappings":"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"}