{"version":3,"file":"sdk-core.cjs.production.min.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/sqrt.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts"],"sourcesContent":["export enum ChainId {\n  COSTON2 = 114\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.COSTON2\n] as const\nexport type SupportedChainsType = typeof SUPPORTED_CHAINS[number]\n\nexport enum NativeCurrencyName {\n  COSTON2 = 'C2FLR',\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress?: string\n  multicallAddress: string\n  quoterAddress?: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  v1MixedRouteQuoterAddress?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.COSTON2]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\n/**\n * @deprecated use V2_FACTORY_ADDRESSES instead\n */\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.COSTON2]: '0xAf2977827a72e3CfE18104b0EDAF61Dd0689cd31'\n}\n/**\n * @deprecated use V2_ROUTER_ADDRESSES instead\n */\nexport const V2_ROUTER_ADDRESS = '0xe551A850133Ae4bCbF069927940296c1428A7194'\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.COSTON2]: '0xe551A850133Ae4bCbF069927940296c1428A7194'\n}\n\nconst COSTON2_ADDRESSES: ChainAddresses = {\n  multicallAddress: \"0x411E2E15390639Cd553508907329Ea95F23D9Bf0\"\n}\n\nexport const PERMIT2_ADDRESS:AddressMap = {\n  [ChainId.COSTON2]: \"0x3CE3deF8d48d0D620061e5F0330a742B28B5945e\",\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS:AddressMap = {\n  [ChainId.COSTON2]: \"0x04F886Aed8B7Fc774535E6DEcaaFd3F2B63BB653\",\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.COSTON2]: COSTON2_ADDRESSES,\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3CoreFactoryAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    if (v3CoreFactoryAddress)\n      memo[chainId] = v3CoreFactoryAddress\n    return memo\n  }, {})\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {})\n}\n\nexport const OracleSwapVoter: AddressMap = {\n  [ChainId.COSTON2]: '0x72E374332EBdcae18CDa5D37Ec02ceD619812c49',\n}\n\nexport const OSLPManager: AddressMap = {\n  [ChainId.COSTON2]: '0x94a61861d5e8154B24095E619Bf69e457F373586',\n}\n\nexport const SuperfarmMultiRewardManager: AddressMap = {\n  [ChainId.COSTON2]: '0xeA2aCE79592BFe28e2b57810DcF668037c7d8a8b',\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.COSTON2]: '0x8Ad2D1A537fe16d1C619fD877a26FA584798107f',\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = {\n  [ChainId.COSTON2]: '0x94ed40CEE9b8752bfaD93F7F79D3E4Bc1b5fC78b',\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const quoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    if (quoterAddress) {\n      memo[chainId] = quoterAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e')\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress\n  if (v1MixedRouteQuoterAddress) {\n    memo[chainId] = v1MixedRouteQuoterAddress\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (SUPPORTED_CHAINS.includes(chainId)) {\n    const id = chainId as SupportedChainsType\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n  }\n  return ''\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [114]: new Token(114, '0xc67dce33d7a8efa5ffeb961899c73fe01bce9273', 18, 'WC2FLR', 'Wrapped C2FLR')\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n"],"names":["ChainId","SUPPORTED_CHAINS","COSTON2","NativeCurrencyName","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","TradeType","Rounding","UNI_ADDRESSES","V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESSES","PERMIT2_ADDRESS","UNIVERSAL_ROUTER_ADDRESS","CHAIN_TO_ADDRESSES_MAP","multicallAddress","V3_CORE_FACTORY_ADDRESSES","v3CoreFactoryAddress","V3_MIGRATOR_ADDRESSES","v3MigratorAddress","MULTICALL_ADDRESSES","OracleSwapVoter","OSLPManager","SuperfarmMultiRewardManager","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_BRAVO_ADDRESSES","TIMELOCK_ADDRESSES","QUOTER_ADDRESSES","quoterAddress","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","nonfungiblePositionManagerAddress","ENS_REGISTRAR_ADDRESSES","TICK_LENS_ADDRESSES","tickLensAddress","MIXED_ROUTE_QUOTER_V1_ADDRESSES","v1MixedRouteQuoterAddress","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","this","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","_this","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","_Fraction","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","Token","bypassChecksum","buyFeeBps","sellFeeBps","test","checkValidAddress","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","Ether","_NativeCurrency","onChain","_etherCache","isNative","weth9","MAX_SAFE_INTEGER","ZERO","ONE","TWO","includes","swapRouter02Address","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","value","greaterThanOrEqual","Math","floor","sqrt","toNumber","z","x"],"mappings":"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"}